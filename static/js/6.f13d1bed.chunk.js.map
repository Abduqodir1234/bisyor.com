{"version":3,"sources":["components/profile_forms/signup1.tsx","../../components/src/apps/contacts/modal-edit/style.tsx","components/apps/contacts/edit-photo-button/style.tsx","components/apps/contacts/edit-photo-button/index.tsx","components/profile_forms/businessInfoForm.tsx","components/signup-form/index.tsx","containers/signup/style.tsx","components/signup-form/Steps/styles.tsx","components/signup-form/Steps/index.tsx","components/signup-form/businessInfoForm.tsx","components/signup-form/Confirmation.tsx","containers/signup/index.tsx","pages/signup.tsx"],"names":["Signup1Form","errors","register","mb","display","htmlFor","id","type","placeholder","feedbackText","first_name","message","state","hasKey","showState","required","minLength","value","last_name","size","phone_number","pattern","email","styled","rest","h5","device","small","p","themeGet","div","StyledLeft","StyledAvatar","StyledEditPhoto","button","ContactEditPhoto","ref","onClick","BusinessInfoFormOnly","images","setimages","branch_address","setbranch_address","fileUploadRef","length","src","URL","createObjectURL","bg","fontWeight","current","click","onChange","e","target","files","accept","style","company_name","legal_name","director_name","pl","mt","label","name","sm","md","lg","xl","description","company_address","website","bank_account","inn","identification_number","nds","oked","delivery_options","hidden","account_type","mfo_bank","map","one","ind","branch","country","handleCountryChange","city","handleCityChange","index","handleZIPChange","address","handleAddressChange","align","justify","fullwidth","array","splice","removeBranchAddress","color","push","addBranchAddress","SigninForm","handleChange","useForm","handleSubmit","formState","action","onSubmit","data","console","log","JSON","stringify","noValidate","fontSize","path","large","xlarge","StyledSignUp","StyledSignUpContainer2","StyledSignin","StepsContainer","ul","Steps","props","className","BusinessInfoForm","useRef","useState","Confirmation","pb","AuthContainer","step","setstep","changeStep","SignUp","justifyCenter","fullHeight"],"mappings":"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","file":"static/js/6.f13d1bed.chunk.js","sourcesContent":["import {Container, Row} from \"../signup-form/style\";\r\nimport {FormGroup, Input, Label} from \"@doar/components\";\r\nimport {hasKey} from \"@doar/shared/dist/methods\";\r\nimport {FC} from \"react\";\r\ninterface Signup1Props{\r\n    errors?:any,\r\n    register?:any\r\n}\r\n\r\n\r\n\r\nlet Signup1Form:FC<Signup1Props> = ({errors,register})=>{\r\n    return(\r\n        <>\r\n        <Container>\r\n            <Row>\r\n                <FormGroup mb=\"20px\">\r\n                    <Label display=\"block\" mb=\"5px\" htmlFor=\"first_name\">\r\n                        Firstname\r\n                    </Label>\r\n                    <Input\r\n                        id=\"first_name\"\r\n                        type=\"text\"\r\n                        placeholder=\"Enter your firstname\"\r\n                        feedbackText={errors?.first_name?.message}\r\n                        state={\r\n                            hasKey(errors, \"first_name\") ? \"error\" : \"success\"\r\n                        }\r\n                        showState={!!hasKey(errors, \"first_name\")}\r\n                        {...register(\"first_name\", {\r\n                            required: \"First Name is required\",\r\n                            minLength: {\r\n                                value: 2,\r\n                                message: \"Minimum length is 2\",\r\n                            },\r\n                        })}\r\n                    />\r\n                </FormGroup>\r\n            </Row>\r\n            <Row>\r\n                <FormGroup mb=\"20px\">\r\n                    <Label display=\"block\" mb=\"5px\" htmlFor=\"last_name\">\r\n                        Lastname\r\n                    </Label>\r\n                    <Input\r\n                        id=\"last_name\"\r\n                        type=\"text\"\r\n                        placeholder=\"Enter your Lastname\"\r\n                        feedbackText={errors?.last_name?.message}\r\n                        state={\r\n                            hasKey(errors, \"last_name\") ? \"error\" : \"success\"\r\n                        }\r\n                        showState={!!hasKey(errors, \"last_name\")}\r\n                        {...register(\"last_name\", {\r\n                            required: \"Last Name is required\",\r\n                            minLength: {\r\n                                value: 2,\r\n                                message: \"Minimum length is 2\",\r\n                            },\r\n                        })}\r\n                    />\r\n                </FormGroup>\r\n            </Row>\r\n        </Container>\r\n    <Container size={2}>\r\n        <Row>\r\n            <FormGroup mb=\"20px\" >\r\n                <Label display=\"block\" mb=\"5px\" htmlFor=\"email\">\r\n                    Telephone Number\r\n                </Label>\r\n                <Input\r\n                    id=\"phone_number\"\r\n                    type=\"text\"\r\n                    placeholder=\"Enter your telephone number\"\r\n                    feedbackText={errors?.phone_number?.message}\r\n                    state={hasKey(errors, \"phone_number\") ? \"error\" : \"success\"}\r\n                    showState={!!hasKey(errors, \"phone_number\")}\r\n                    {...register(\"phone_number\", {\r\n                        required: \"Telephone number is required\",\r\n                        pattern: {\r\n                            value: /[+998]{3}[0-9]{2}[0-9]{8}/i,\r\n                            message: \"invalid phone number\",\r\n                        },\r\n                    })}\r\n                />\r\n            </FormGroup>\r\n        </Row>\r\n        <Row>\r\n            <FormGroup mb=\"20px\">\r\n                <Label display=\"block\" mb=\"5px\" htmlFor=\"password\">\r\n                    Company Email\r\n                </Label>\r\n                <Input\r\n                    id=\"email\"\r\n                    type=\"text\"\r\n                    placeholder=\"Enter your email address\"\r\n                    feedbackText={errors?.email?.message}\r\n                    state={hasKey(errors, \"email\") ? \"error\" : \"success\"}\r\n                    showState={!!hasKey(errors, \"email\")}\r\n                    {...register(\"email\", {\r\n                        required: \"Email is required\",\r\n                        pattern: {\r\n                            value: /^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i,\r\n                            message: \"invalid email address\",\r\n                        },\r\n                    })}\r\n                />\r\n            </FormGroup>\r\n        </Row>\r\n    </Container>\r\n    </>\r\n    )\r\n}\r\n\r\nexport default Signup1Form;","import styled, { device, themeGet } from \"@doar/shared/styled\";\nimport { ModalClose } from \"@doar/components\";\n\nexport const StyledClose = styled(({ ...rest }) => <ModalClose {...rest} />)`\n    position: absolute;\n    top: 15px;\n    right: 20px;\n`;\n\nexport const StyledTitle = styled.h5`\n    font-size: 18px;\n    margin-bottom: 20px;\n    ${device.small} {\n        font-size: 20px;\n    }\n`;\n\nexport const StyledDesc = styled.p`\n    font-size: 13px;\n    color: ${themeGet(\"colros.text3\")};\n    margin-bottom: 30px;\n`;\n\nexport const StyledWrap = styled.div`\n    ${device.small} {\n        display: flex;\n    }\n`;\n\nexport const StyledLeft = styled.div`\n    ${device.small} {\n        margin-right: 30px;\n    }\n`;\n\nexport const StyledRight = styled.div`\n    flex: 1 1 auto;\n`;\n\nexport const StyledAvatar = styled.div`\n    position: relative;\n    margin-bottom: 20px;\n    display: inline-block;\n`;\n\nexport const StyledGroup = styled.div`\n    margin-bottom: 10px;\n`;\n","import styled, { themeGet } from \"@doar/shared/styled\";\n\nexport const StyledEditPhoto = styled.button`\n    background-color: transparent;\n    border: none;\n    padding: 0;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    flex-shrink: 0;\n    width: 24px;\n    height: 24px;\n    background-color: ${themeGet(\"colors.light\")};\n    color: ${themeGet(\"colors.text3\")};\n    border-radius: 100%;\n    position: absolute;\n    bottom: 0;\n    right: 0;\n    box-shadow: 0 0 0 3px #fff;\n    svg {\n        width: 12px;\n        stroke-width: 3px;\n    }\n`;\n","import { FC } from \"react\";\nimport { Edit2 } from \"react-feather\";\nimport { StyledEditPhoto } from \"./style\";\n\ninterface ContactEditPhotoProps{\n    ref?:any\n    onClick?:any,\n    type?:'button' |'submit'| 'reset'\n}\n\nconst ContactEditPhoto: FC<ContactEditPhotoProps> = ({ref,onClick,type}) => {\n    return (\n        <StyledEditPhoto ref={ref} onClick={onClick} type={type}>\n            <Edit2 />\n        </StyledEditPhoto>\n    );\n};\n\nexport default ContactEditPhoto;\n","import {Container, Row, StyledDivider} from \"../signup-form/style\";\r\nimport {StyledAvatar, StyledLeft} from \"@doar/components/src/apps/contacts/modal-edit/style\";\r\nimport {Avatar, AvatarInitial, Button, FormGroup, Input, Label, Radio, Select, Textarea} from \"@doar/components\";\r\nimport ContactEditPhoto from \"../apps/contacts/edit-photo-button\";\r\nimport {hasKey} from \"@doar/shared/dist/methods/index\";\r\nimport {FC} from \"react\";\r\n\r\n\r\ninterface BusinessInfoForm{\r\n    errors:any,\r\n    register:any,\r\n    images:any,\r\n    setimages:any,\r\n    branch_address:any,\r\n    setbranch_address:any,\r\n    fileUploadRef:any\r\n\r\n}\r\n\r\n\r\nlet BusinessInfoFormOnly:FC<BusinessInfoForm> = ({\r\n     errors,\r\n     register,\r\n     images,\r\n     setimages,\r\n     branch_address,\r\n     setbranch_address,\r\n     fileUploadRef\r\n})=>{\r\n    let addBranchAddress = ()=>{\r\n        let array = [...branch_address]\r\n        array.push({\r\n            country:\"\",\r\n            city:\"\",\r\n            index:\"\",\r\n            address:\"\"\r\n        })\r\n        setbranch_address(array)\r\n    }\r\n    let handleCountryChange = (e:any,ind:any)=>{\r\n        let branch:any = [...branch_address]\r\n        branch[ind].country = e.target.value\r\n        setbranch_address(branch)\r\n    }\r\n    let handleCityChange = (e:any,ind:any)=>{\r\n        let branch:any = [...branch_address]\r\n        branch[ind].city = e.target.value\r\n        setbranch_address(branch)\r\n    }\r\n    let handleAddressChange = (e:any,ind:any)=>{\r\n        let branch:any = [...branch_address]\r\n        branch[ind].address = e.target.value\r\n        setbranch_address(branch)\r\n    }\r\n    let handleZIPChange = (e:any,ind:any)=>{\r\n        let branch:any = [...branch_address]\r\n        branch[ind].index = e.target.value\r\n        setbranch_address(branch)\r\n    }\r\n    let removeBranchAddress = (ind:number)=>{\r\n        let array = [...branch_address]\r\n        array.splice(ind-1,1)\r\n        setbranch_address(array)\r\n    }\r\n\r\n    let handleButtonClick = ()=>{\r\n        fileUploadRef?.current?.click()\r\n    }\r\n    return(\r\n        <>\r\n            <Container>\r\n                <Row>\r\n                    <StyledLeft>\r\n                        <StyledAvatar>\r\n                            <Avatar size='xxl'>\r\n                                {images.length!==0 ?<img  src={URL.createObjectURL(images)}/>:\r\n                                    <AvatarInitial bg=\"gray700\" fontWeight={400}>\r\n                                        A\r\n                                    </AvatarInitial>\r\n                                }\r\n                            </Avatar>\r\n\r\n                            <ContactEditPhoto type='button'  onClick={handleButtonClick} />\r\n                            <input ref={fileUploadRef} onChange={(e:any)=>setimages(e.target.files[0])} accept='image/*' type='file' style={{display:'none'}}/>\r\n                        </StyledAvatar>\r\n                    </StyledLeft>\r\n                </Row>\r\n            </Container>\r\n            <Container>\r\n                <Row>\r\n                    <FormGroup mb=\"20px\">\r\n                        <Label display=\"block\" mb=\"5px\" htmlFor=\"company_name\">\r\n                            Business name\r\n                        </Label>\r\n                        <Input\r\n                            id=\"company_name\"\r\n                            type=\"text\"\r\n                            placeholder=\"Enter your company name\"\r\n                            feedbackText={errors?.company_name?.message}\r\n                            state={\r\n                                hasKey(errors, \"company_name\") ? \"error\" : \"success\"\r\n                            }\r\n                            showState={!!hasKey(errors, \"company_name\")}\r\n                            {...register(\"company_name\", {\r\n                                required: \"Company Name is required\",\r\n                            })}\r\n                        />\r\n                    </FormGroup>\r\n                </Row>\r\n                <Row>\r\n                    <FormGroup mb=\"20px\">\r\n                        <Label display=\"block\" mb=\"5px\" htmlFor=\"legal_name\">\r\n                            Legal name\r\n                        </Label>\r\n                        <Input\r\n                            id=\"legal_name\"\r\n                            type=\"text\"\r\n                            placeholder=\"Enter your legal name\"\r\n                            feedbackText={errors?.legal_name?.message}\r\n                            state={\r\n                                hasKey(errors, \"legal_name\") ? \"error\" : \"success\"\r\n                            }\r\n                            showState={!!hasKey(errors, \"legal_name\")}\r\n                            {...register(\"legal_name\", {\r\n                                required: \"Legal Name is required\",\r\n                            })}\r\n                        />\r\n                    </FormGroup>\r\n                </Row>\r\n                <Row>\r\n                    <FormGroup mb=\"20px\" >\r\n                        <Label display=\"block\" mb=\"5px\" htmlFor=\"director_name\">\r\n                            Name of chairman of business\r\n                        </Label>\r\n                        <Input\r\n                            id=\"director_name\"\r\n                            type=\"text\"\r\n                            placeholder=\"Enter name of chairman of business\"\r\n                            feedbackText={errors?.director_name?.message}\r\n                            state={hasKey(errors, \"director_name\") ? \"error\" : \"success\"}\r\n                            showState={!!hasKey(errors, \"director_name\")}\r\n                            {...register(\"director_name\", {\r\n                                required: \"director name is required\"\r\n                            })}\r\n                        />\r\n                    </FormGroup>\r\n                </Row>\r\n                <Row>\r\n                    <FormGroup mb=\"15px\">\r\n                        <Label display=\"block\" mb=\"20px\" htmlFor=\"business_type\">\r\n                            Business type\r\n                        </Label>\r\n                        <Container>\r\n                            <Row><Radio value='Individual' pl='1rem' mt=\"8px\" label='Individual' id='Individual' name='business_type'/></Row>\r\n                            <Row><Radio value='Other' label='Other' mt=\"8px\" id='Other' name='business_type'/></Row>\r\n                        </Container>\r\n                    </FormGroup>\r\n                </Row>\r\n                <Row sm=\"100\" md=\"100\" lg=\"100\" xl=\"100\">\r\n                    <FormGroup mb='20px'>\r\n                        <Label display=\"block\" mb=\"5px\" htmlFor=\"director_name\">\r\n                            Name of chairman of business\r\n                        </Label>\r\n                        <Textarea\r\n                            id=\"description\"\r\n                            feedbackText={errors?.description?.message}\r\n                            state={hasKey(errors, \"description\") ? \"error\" : \"success\"}\r\n                            showState={!!hasKey(errors, \"description\")}\r\n                            {...register(\"description\", {\r\n                                required: \"description is required\",\r\n                            })}\r\n                        />\r\n                    </FormGroup>\r\n                </Row>\r\n                <Row>\r\n                    <FormGroup mb=\"20px\" >\r\n                        <Label display=\"block\" mb=\"5px\" htmlFor=\"company_address\">\r\n                            Company Address\r\n                        </Label>\r\n                        <Input\r\n                            id=\"company_address\"\r\n                            type=\"text\"\r\n                            placeholder=\"Enter your company address\"\r\n                            feedbackText={errors?.company_address?.message}\r\n                            state={hasKey(errors, \"company_address\") ? \"error\" : \"success\"}\r\n                            showState={!!hasKey(errors, \"company_address\")}\r\n                            {...register(\"company_address\", {\r\n                                required: \"company address is required\",\r\n                            })}\r\n                        />\r\n                    </FormGroup>\r\n                </Row>\r\n                <Row>\r\n                    <FormGroup mb=\"20px\">\r\n                        <Label display=\"block\" mb=\"5px\" htmlFor=\"password\">\r\n                            Website\r\n                        </Label>\r\n                        <Input\r\n                            id=\"website\"\r\n                            type=\"text\"\r\n                            placeholder=\"Enter your website\"\r\n                            feedbackText={errors?.website?.message}\r\n                            state={hasKey(errors, \"website\") ? \"error\" : \"success\"}\r\n                            showState={!!hasKey(errors, \"website\")}\r\n                            {...register(\"website\", {\r\n                                pattern: {\r\n                                    value: /[(http(s)?):\\/\\/(www\\.)?a-zA-Z0-9@:%._\\+~#=]{2,256}\\.[a-z]{2,6}\\b([-a-zA-Z0-9@:%_\\+.~#?&//=]*)/i,\r\n                                    message: \"invalid url\",\r\n                                },\r\n                            })}\r\n                        />\r\n                    </FormGroup>\r\n                </Row>\r\n                <Row>\r\n                    <FormGroup mb=\"20px\" >\r\n                        <Label display=\"block\" mb=\"5px\" htmlFor=\"bank_account\">\r\n                            Bank account\r\n                        </Label>\r\n                        <Input\r\n                            id=\"bank_account\"\r\n                            type=\"text\"\r\n                            placeholder=\"Enter your bank account\"\r\n                            feedbackText={errors?.bank_account?.message}\r\n                            state={hasKey(errors, \"bank_account\") ? \"error\" : \"success\"}\r\n                            showState={!!hasKey(errors, \"bank_account\")}\r\n                            {...register(\"bank_account\", {\r\n                                required: \"bank account is required\",\r\n                            })}\r\n                        />\r\n                    </FormGroup>\r\n                </Row>\r\n                <Row>\r\n                    <FormGroup mb=\"20px\" >\r\n                        <Label display=\"block\" mb=\"5px\" htmlFor=\"inn\">\r\n                            INN\r\n                        </Label>\r\n                        <Input\r\n                            id=\"inn\"\r\n                            type=\"text\"\r\n                            placeholder=\"Enter your INN\"\r\n                            feedbackText={errors?.inn?.message}\r\n                            state={hasKey(errors, \"inn\") ? \"error\" : \"success\"}\r\n                            showState={!!hasKey(errors, \"inn\")}\r\n                            {...register(\"inn\", {\r\n                                required: \"INN is required\",\r\n                            })}\r\n                        />\r\n                    </FormGroup>\r\n                </Row>\r\n                <Row>\r\n                    <FormGroup mb=\"20px\" >\r\n                        <Label display=\"block\" mb=\"5px\" htmlFor=\"identification_number\">\r\n                            Identification number\r\n                        </Label>\r\n                        <Input\r\n                            id=\"identification_number\"\r\n                            type=\"text\"\r\n                            placeholder=\"Enter your Identification number\"\r\n                            feedbackText={errors?.identification_number?.message}\r\n                            state={hasKey(errors, \"identification_number\") ? \"error\" : \"success\"}\r\n                            showState={!!hasKey(errors, \"identification_number\")}\r\n                            {...register(\"identification_number\", {\r\n                                required: \"Identification number is required\",\r\n                            })}\r\n                        />\r\n                    </FormGroup>\r\n                </Row>\r\n                <Row>\r\n                    <FormGroup mb=\"20px\" >\r\n                        <Label display=\"block\" mb=\"5px\" htmlFor=\"nds\">\r\n                            NDS\r\n                        </Label>\r\n                        <Input\r\n                            id=\"nds\"\r\n                            type=\"text\"\r\n                            placeholder=\"Enter your NDS\"\r\n                            feedbackText={errors?.nds?.message}\r\n                            state={hasKey(errors, \"nds\") ? \"error\" : \"success\"}\r\n                            showState={!!hasKey(errors, \"nds\")}\r\n                            {...register(\"nds\", {\r\n                                required: \"NDS is required\",\r\n                            })}\r\n                        />\r\n                    </FormGroup>\r\n                </Row>\r\n\r\n                <Row>\r\n                    <FormGroup mb=\"20px\" >\r\n                        <Label display=\"block\" mb=\"5px\" htmlFor=\"oked\">\r\n                            OKED\r\n                        </Label>\r\n                        <Input\r\n                            id=\"oked\"\r\n                            type=\"text\"\r\n                            placeholder=\"Enter your OKED\"\r\n                            feedbackText={errors?.oked?.message}\r\n                            state={hasKey(errors, \"oked\") ? \"error\" : \"success\"}\r\n                            showState={!!hasKey(errors, \"oked\")}\r\n                            {...register(\"oked\", {\r\n                                required: \"OKED is required\",\r\n                            })}\r\n                        />\r\n                    </FormGroup>\r\n                </Row>\r\n                <Row>\r\n                    <FormGroup mb=\"20px\" >\r\n                        <Label display=\"block\" mb=\"5px\" htmlFor=\"delivery_options\">\r\n                            Delivery Options\r\n                        </Label>\r\n                        <Select\r\n                            id='delivery_options'\r\n                            feedbackText={errors?.delivery_options?.message}\r\n                            state={hasKey(errors, \"delivery_options\") ? \"error\" : \"success\"}\r\n                            showState={!!hasKey(errors, \"delivery_options\")}\r\n                            {...register(\"delivery_options\", {\r\n                                required: \"Delivery Options is required\",\r\n                            })}\r\n                        >\r\n                            <option hidden={true} value='Delivery Options is required'></option>\r\n                        </Select>\r\n\r\n                    </FormGroup>\r\n                </Row>\r\n\r\n                <Row>\r\n                    <FormGroup mb=\"20px\" >\r\n                        <Label display=\"block\" mb=\"5px\" htmlFor=\"account_type\">\r\n                            Account type\r\n                        </Label>\r\n                        <Select\r\n                            id='account_type'\r\n                            feedbackText={errors?.account_type?.message}\r\n                            state={hasKey(errors, \"account_type\") ? \"error\" : \"success\"}\r\n                            showState={!!hasKey(errors, \"account_type\")}\r\n                            {...register(\"account_type\", {\r\n                                required: \"account_type is required\",\r\n                            })}\r\n                        >\r\n                            <option hidden={true} value='account_type is required'></option>\r\n                        </Select>\r\n\r\n                    </FormGroup>\r\n                </Row>\r\n                <Row>\r\n                    <FormGroup mb=\"20px\" >\r\n                        <Label display=\"block\" mb=\"5px\" htmlFor=\"mfo_bank\">\r\n                            MFO bank\r\n\r\n                        </Label>\r\n                        <Input\r\n                            id=\"mfo_bank\"\r\n                            type=\"text\"\r\n                            placeholder=\"Enter your MFO bank\"\r\n                            feedbackText={errors?.mfo_bank?.message}\r\n                            state={hasKey(errors, \"mfo_bank\") ? \"error\" : \"success\"}\r\n                            showState={!!hasKey(errors, \"mfo_bank\")}\r\n                            {...register(\"mfo_bank\", {\r\n                                required: \"MFO bank is required\",\r\n                            })}\r\n                        />\r\n                    </FormGroup>\r\n                </Row>\r\n\r\n            </Container>\r\n            <StyledDivider>Branch Address</StyledDivider>\r\n\r\n            {branch_address.map((one:any,ind:any)=>(\r\n                <Container>\r\n                    <Row>\r\n                        <FormGroup mb=\"20px\" >\r\n                            <Label display=\"block\" mb=\"5px\" htmlFor=\"country\">\r\n                                Country\r\n                            </Label>\r\n                            <Select\r\n                                name='country'\r\n                                id='country'\r\n                                onChange={(e)=>handleCountryChange(e,ind)}\r\n                                feedbackText={errors?.country?.message}\r\n                                state={hasKey(errors, \"country\") ? \"error\" : \"success\"}\r\n                                showState={!!hasKey(errors, \"country\")}\r\n                            >\r\n                                <option hidden={true} value='country is required'></option>\r\n                            </Select>\r\n                        </FormGroup>\r\n                    </Row>\r\n                    <Row>\r\n                        <FormGroup mb=\"20px\" >\r\n                            <Label display=\"block\" mb=\"5px\" htmlFor=\"city\">\r\n                                City\r\n                            </Label>\r\n                            <Select\r\n                                name='city'\r\n                                id='city'\r\n                                onChange={(e)=>handleCityChange(e,ind)}\r\n                                feedbackText={errors?.city?.message}\r\n                                state={hasKey(errors, \"city\") ? \"error\" : \"success\"}\r\n                                showState={!!hasKey(errors, \"city\")}\r\n                            >\r\n                                <option hidden={true} value='city is required'></option>\r\n                            </Select>\r\n                        </FormGroup>\r\n                    </Row>\r\n                    <Row   sm=\"40\" md=\"45\" lg=\"46\" xl=\"46\">\r\n                        <FormGroup mb=\"20px\" >\r\n                            <Label display=\"block\" mb=\"5px\" htmlFor=\"zip\">\r\n                                ZIP code\r\n                            </Label>\r\n                            <Input\r\n                                name=\"zip\"\r\n                                id=\"zip\"\r\n                                type=\"text\"\r\n                                placeholder=\"Enter your ZIP code\"\r\n                                onChange={(e)=>handleZIPChange(e,ind)}\r\n                                feedbackText={errors?.index?.message}\r\n                            />\r\n                        </FormGroup>\r\n                    </Row>\r\n                    <Row sm=\"40\" md=\"45\" lg=\"46\" xl=\"46\">\r\n                        <FormGroup mb=\"20px\" >\r\n                            <Label display=\"block\" mb=\"5px\" htmlFor=\"address\">\r\n                                Address\r\n                            </Label>\r\n                            <Input\r\n                                name=\"address\"\r\n                                id=\"address\"\r\n                                type=\"text\"\r\n                                placeholder=\"Enter your address\"\r\n                                onChange={(e)=>handleAddressChange(e,ind)}\r\n                            />\r\n                        </FormGroup>\r\n                    </Row>\r\n                    <Row align='end' justify='space-between' sm=\"20\" md=\"10\" lg=\"8\" xl=\"8\" >\r\n                        <Button fullwidth onClick={()=>removeBranchAddress(ind)}  color='danger' mt=\"20px\" > Delete</Button>\r\n                    </Row>\r\n                </Container>\r\n            ))}\r\n            <Container>\r\n                <Row sm=\"100\" md=\"100\" lg=\"100\" xl=\"100\">\r\n                    <Button  type=\"button\" onClick={()=>addBranchAddress()} color=\"danger\" fullwidth>\r\n                        Add\r\n                    </Button>\r\n                </Row>\r\n                <Row sm=\"100\" md=\"100\" lg=\"100\" xl=\"100\">\r\n                    <hr/>\r\n                </Row>\r\n            </Container>\r\n        </>\r\n    )\r\n}\r\nexport default BusinessInfoFormOnly","import { FC } from \"react\";\r\nimport {\r\n    FormGroup,\r\n    Anchor,\r\n    Button,\r\n    Text,\r\n} from \"@doar/components\";\r\nimport { useForm } from \"react-hook-form\";\r\nimport {\r\n    StyledWrap,\r\n    StyledTitle,\r\n    StyledDesc,\r\n    StyledBottomText,\r\n    Container,\r\n    Row\r\n} from \"./style\";\r\nimport Signup1Form from \"../profile_forms/signup1\";\r\n\r\n\r\n\r\ninterface SignUpProps{\r\n    handleChange?:any\r\n}\r\n\r\n\r\ninterface IFormValues {\r\n    email: string;\r\n    password: string;\r\n    first_name: string;\r\n    last_name: string;\r\n}\r\n\r\nconst SigninForm: FC<SignUpProps> = ({handleChange}) => {\r\n    const {\r\n        register,\r\n        handleSubmit,\r\n        formState: { errors },\r\n    } = useForm();\r\n\r\n    const onSubmit = (data: IFormValues) => {\r\n        console.log(JSON.stringify(data, null));\r\n        handleChange()\r\n    };\r\n\r\n    return (\r\n        <StyledWrap>\r\n            <StyledTitle>Create New Account</StyledTitle>\r\n            <StyledDesc>\r\n                It&apos;s free to signup and only takes a minute.\r\n            </StyledDesc>\r\n            <form action=\"#\" onSubmit={handleSubmit(onSubmit)} noValidate>\r\n              <Signup1Form register={register} errors={errors} />\r\n\r\n                   <FormGroup mb=\"20px\">\r\n                       <Text fontSize=\"12px\">\r\n                           By clicking <strong>Create an account</strong> below,\r\n                           you agree to our terms of service and privacy statement.\r\n                       </Text>\r\n                   </FormGroup>\r\n\r\n                <Container>\r\n                    <Row sm=\"100\" md=\"100\" lg=\"100\" xl=\"100\">\r\n                        <FormGroup>\r\n                            <Button type=\"submit\" color=\"brand2\" fullwidth>\r\n                                Next\r\n                            </Button>\r\n                        </FormGroup>\r\n                    </Row>\r\n                </Container>\r\n\r\n\r\n                <StyledBottomText>\r\n                    Don&apos;t have an account?{\" \"}\r\n                    <Anchor path=\"/signin\">Sign In</Anchor>\r\n                </StyledBottomText>\r\n            </form>\r\n        </StyledWrap>\r\n    );\r\n};\r\n\r\nexport default SigninForm;\r\n\r\n\r\n\r\n{/*<Container size={2}>*/}\r\n{/*    <Row>*/}\r\n{/*        <FormGroup mb=\"20px\" >*/}\r\n{/*            <Label display=\"block\" mb=\"5px\" htmlFor=\"email\">*/}\r\n{/*                Password*/}\r\n{/*            </Label>*/}\r\n{/*            <Input*/}\r\n{/*                id=\"password\"*/}\r\n{/*                type=\"password\"*/}\r\n{/*                placeholder=\"Enter your password\"*/}\r\n{/*                feedbackText={errors?.password?.message}*/}\r\n{/*                state={hasKey(errors, \"password\") ? \"error\" : \"success\"}*/}\r\n{/*                showState={!!hasKey(errors, \"password\")}*/}\r\n{/*                {...register(\"password\", {*/}\r\n{/*                    required: \"Password is required\",*/}\r\n{/*                    minLength: {*/}\r\n{/*                        value: 6,*/}\r\n{/*                        message: \"Minimum length is 6\",*/}\r\n{/*                    },*/}\r\n{/*                    maxLength: {*/}\r\n{/*                        value: 10,*/}\r\n{/*                        message: \"Minimum length is 10\",*/}\r\n{/*                    },*/}\r\n{/*                })}*/}\r\n{/*            />*/}\r\n{/*        </FormGroup>*/}\r\n{/*    </Row>*/}\r\n{/*    <Row>*/}\r\n{/*        <FormGroup mb=\"20px\">*/}\r\n{/*            <Label display=\"block\" mb=\"5px\" htmlFor=\"password\">*/}\r\n{/*                Confirmation Password*/}\r\n{/*            </Label>*/}\r\n{/*            <Input*/}\r\n{/*                id=\"confirmation_password\"*/}\r\n{/*                type=\"password\"*/}\r\n{/*                placeholder=\"Enter your confirmation_password\"*/}\r\n{/*                feedbackText={errors?.confirmation_password?.message}*/}\r\n{/*                state={hasKey(errors, \"confirmation_password\") ? \"error\" : \"success\"}*/}\r\n{/*                showState={!!hasKey(errors, \"confirmation_password\")}*/}\r\n{/*                {...register(\"confirmation_password\", {*/}\r\n{/*                    required: \"Password is required\",*/}\r\n{/*                })}*/}\r\n{/*            />*/}\r\n{/*        </FormGroup>*/}\r\n{/*    </Row>*/}\r\n{/*</Container>*/}\r\n","import styled, { device } from \"@doar/shared/styled\";\r\nimport { Media, MediaBody } from \"@doar/components\";\r\n\r\nexport const StyledMedia = styled(({ ...rest }) => <Media {...rest} />)`\r\n    height: 100%;\r\n    align-items: stretch;\r\n    justify-content: center;\r\n`;\r\n\r\nexport const StyledMediaBody = styled(({ ...rest }) => <MediaBody {...rest} />)`\r\n    display: none;\r\n    ${device.large} {\r\n        display: flex;\r\n        position: relative;\r\n        align-items: center;\r\n        padding-left: 50px;\r\n        padding-right: 50px;\r\n    }\r\n    ${device.xlarge} {\r\n        padding-left: 60px;\r\n        padding-right: 60px;\r\n    }\r\n`;\r\n\r\nexport const StyledImage = styled.div``;\r\n\r\nexport const StyledImgText = styled.div`\r\n    font-size: 12px;\r\n    text-align: center;\r\n    right: 0px;\r\n    bottom: -10px;\r\n    position: absolute;\r\n`;\r\n\r\n\r\nexport const StyledSignUp = styled.div`\r\n  ${device.large} {\r\n    margin-right: 50px;\r\n  }\r\n  ${device.xlarge} {\r\n    margin-right: 60px;\r\n  }\r\n`;\r\n\r\nexport const StyledSignUpContainer2 = styled.div`\r\n`;\r\n\r\n\r\nexport const StyledSignin = styled.div`\r\n    display: flex;\r\n    justify-content: center;\r\n    align-items: center;\r\n    ${device.large} {\r\n        margin-right: 50px;\r\n    }\r\n    ${device.xlarge} {\r\n        margin-right: 60px;\r\n    }\r\n`;\r\n","import styled from \"@doar/shared/dist/styled\";\r\n\r\nlet StepsContainer = styled.ul`\r\n  counter-reset: step;\r\n  & > li{\r\n    list-style: none;\r\n    display: inline-block;\r\n    width: 31%;\r\n    position: relative;\r\n    text-align: center;\r\n    cursor: pointer;\r\n  }\r\n  & > li:before{\r\n    content: counter(step);\r\n    counter-increment: step;\r\n    width: 25px;\r\n    height: 25px;\r\n    line-height : 25px;\r\n    border: 1px solid #ddd;\r\n    border-radius: 100%;\r\n    display: block;\r\n    text-align: center;\r\n    margin: 0 auto 10px auto;\r\n    background-color: #fff;\r\n  }\r\n  & > li:after{\r\n    content: \"\";\r\n    position: absolute;\r\n    width: 100%;\r\n    height: 1px;\r\n    background-color: #ddd;\r\n    top: 15px;\r\n    left: -50%;\r\n    z-index : -1;\r\n  }\r\n  & > li.current:before{\r\n    content: counter(step);\r\n    counter-increment: step;\r\n    width: 25px;\r\n    height: 25px;\r\n    line-height : 25px;\r\n    border: 1px solid green;\r\n    border-radius: 100%;\r\n    display: block;\r\n    text-align: center;\r\n    margin: 0 auto 10px auto;\r\n    background-color: #fff;\r\n    font-size: small;\r\n  }\r\n  & > li.active:before{\r\n    content: \"✔\";\r\n    width: 25px;\r\n    height: 25px;\r\n    line-height : 25px;\r\n    border: 1px solid green;\r\n    border-radius: 100%;\r\n    display: block;\r\n    text-align: center;\r\n    margin: 0 auto 10px auto;\r\n    background-color: #fff;\r\n    font-size: small;\r\n  }\r\n  & > li:first-child:after{\r\n    content: none;\r\n    color: green;\r\n  }\r\n  & > li.active{\r\n    color: green;\r\n  }\r\n  & > li.active:before{\r\n    color: green;\r\n  }\r\n  & > li.active + li:after {\r\n    background-color: green;\r\n  }\r\n  \r\n`;\r\n\r\nexport default StepsContainer\r\n","import StepsContainer from \"./styles\";\r\n\r\nlet Steps = (props:any)=>{\r\n        return (\r\n        <StepsContainer >\r\n                <li className={props.current >= 1 ? `${props.current > 1 && 'active'} current ` : \"\"}>Personal</li>\r\n                <li className={props.current >= 2 ? `${props.current > 2 &&'active'} current ` : \"\"}>Business</li>\r\n                <li className={props.current >= 3 ? `${props.current > 3 &&'active'} current ` : \"\"}>Confirmation</li>\r\n        </StepsContainer>\r\n        )\r\n}\r\nexport default Steps","import {FC, useRef, useState} from \"react\";\r\nimport {useForm} from \"react-hook-form\";\r\nimport {\r\n    Container,\r\n    Row,\r\n    StyledBottomText,\r\n    StyledDesc,\r\n    StyledDivider,\r\n    StyledTitle,\r\n    StyledWrap\r\n} from \"./style\";\r\nimport {\r\n    Anchor,\r\n    Button,\r\n    FormGroup,\r\n    Input,\r\n    Label,\r\n    Text,\r\n    Radio, Textarea, Select\r\n} from \"@doar/components\";\r\nimport {hasKey} from \"@doar/shared/dist/methods\";\r\nimport {\r\n    Avatar,\r\n    AvatarInitial\r\n} from '@doar/components'\r\nimport {\r\n    StyledLeft,\r\n    StyledAvatar\r\n} from '@doar/components/src/apps/contacts/modal-edit/style'\r\nimport ContactEditPhoto from \"../apps/contacts/edit-photo-button\";\r\nimport BusinessInfoFormOnly from \"../profile_forms/businessInfoForm\";\r\n\r\n\r\n\r\n\r\ninterface BusinessInfoFormProps{\r\n    handleChange?:any\r\n}\r\n\r\n\r\ninterface IFormValues {\r\n    main_image: string;\r\n    company_name: string;\r\n    legal_name: string;\r\n    business_name: string;\r\n    type_business:boolean;\r\n    description:string;\r\n    address:string;\r\n    director_full_name:string;\r\n    bank_account:string;\r\n    inn:string;\r\n    identification_number:string;\r\n    nds:string;\r\n    oked:string;\r\n    account_type:string;\r\n    mfo_bank:string;\r\n    delivery_type:string;\r\n    website:string;\r\n    branch:[{\r\n        country:string;\r\n        city:string;\r\n        index:number;\r\n        address:string;\r\n    }]\r\n\r\n}\r\n\r\nlet BusinessInfoForm:FC<BusinessInfoFormProps>= ({handleChange})=>{\r\n    let fileUploadRef = useRef<HTMLInputElement>(null)\r\n    let [images,setimages] = useState<any>([])\r\n    const {\r\n        register,\r\n        handleSubmit,\r\n        formState: { errors },\r\n    } = useForm();\r\n    let [branch_address,setbranch_address] = useState([{\r\n        country:\"\",\r\n        city:\"\",\r\n        index:\"\",\r\n        address:\"\",\r\n    }])\r\n\r\n\r\n    const onSubmit = (data: IFormValues) => {\r\n        console.log(JSON.stringify(data, null));\r\n        handleChange()\r\n    };\r\n\r\n    return (\r\n        <StyledWrap>\r\n            <StyledTitle>Business account</StyledTitle>\r\n\r\n            <form action=\"#\" onSubmit={handleSubmit(onSubmit)} noValidate>\r\n                <BusinessInfoFormOnly\r\n                    errors={errors}\r\n                    register={register}\r\n                    images={images}\r\n                    setimages={(e:any)=>setimages(e)}\r\n                    branch_address={branch_address}\r\n                    setbranch_address={(e:any)=>setbranch_address(e)}\r\n                    fileUploadRef={fileUploadRef}\r\n                />\r\n                <Container>\r\n\r\n                    <Row sm=\"100\" md=\"100\" lg=\"100\" xl=\"100\">\r\n                        <Button type=\"submit\" color=\"brand2\" fullwidth>\r\n                            Next\r\n                        </Button>\r\n                    </Row>\r\n\r\n                </Container>\r\n\r\n            </form>\r\n        </StyledWrap>\r\n    );\r\n}\r\nexport default BusinessInfoForm","import {StyledDesc, StyledTitle, StyledWrap2} from \"./style\";\r\nimport React from \"react\";\r\n\r\n\r\nexport interface ConfirmationProps{\r\n    handleChange:any\r\n}\r\n\r\n\r\nlet Confirmation:React.FC<ConfirmationProps> = ({handleChange})=>{\r\n    return (\r\n        <StyledWrap2 pb=\"100px\">\r\n            <StyledTitle  align='center'>Business account</StyledTitle>\r\n            <StyledDesc>You successfully registered as vendor.\r\n                Our people may connect to you as much as possible and\r\n                we may give you access to website as a vendor after qualification\r\n            </StyledDesc>\r\n        </StyledWrap2>\r\n    )\r\n}\r\n\r\nexport default Confirmation;","import {FC, useState,Fragment} from \"react\";\r\nimport SignupForm from \"../../components/signup-form\";\r\nimport {\r\n    StyledMedia,\r\n    StyledMediaBody,\r\n    StyledImage,\r\n    StyledImgText,\r\n    StyledSignUp, StyledSignin, StyledSignUpContainer2,\r\n} from \"./style\";\r\nimport Steps from \"../../components/signup-form/Steps\";\r\nimport BusinessInfoForm from \"../../components/signup-form/businessInfoForm\";\r\nimport Confirmation from \"../../components/signup-form/Confirmation\";\r\n\r\nconst AuthContainer: FC = () => {\r\n    let [step,setstep] = useState(1)\r\n    let changeStep = ()=>{\r\n        setstep(step+1)\r\n    }\r\n    return (\r\n            <Fragment>\r\n                <StyledSignUpContainer2>\r\n                    <Steps current={step} />\r\n                    {step === 1 && <StyledSignin><SignupForm handleChange={()=>changeStep()} /></StyledSignin>}\r\n                    {step === 2 && <StyledSignin><BusinessInfoForm handleChange={()=>changeStep()} /></StyledSignin>}\r\n                    {step === 3 && <StyledSignUp><Confirmation handleChange={()=>changeStep()} /></StyledSignUp>}\r\n                </StyledSignUpContainer2>\r\n            </Fragment>\r\n    );\r\n};\r\n\r\nexport default AuthContainer;\r\n","import React from \"react\";\r\nimport Layout from \"../layouts\";\r\nimport Content from \"../layouts/content\";\r\nimport AuthContainer from \"../containers/signup\";\r\nimport SEO from \"../components/seo\";\r\n\r\nconst SignUp: React.FC = () => {\r\n    return (\r\n        <Layout>\r\n            <SEO />\r\n            <Content justifyCenter fullHeight>\r\n                <AuthContainer />\r\n            </Content>\r\n        </Layout>\r\n    );\r\n};\r\n\r\nexport default SignUp;\r\n"],"sourceRoot":""}