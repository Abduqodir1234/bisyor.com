{"version":3,"sources":["components/signup-form/style.tsx","components/signup-form/index.tsx","containers/signup/style.tsx","components/signup-form/Steps/styles.tsx","components/signup-form/Steps/index.tsx","../../components/src/apps/contacts/modal-edit/style.tsx","../../../node_modules/react-feather/dist/icons/edit-2.js","components/apps/contacts/edit-photo-button/style.tsx","components/apps/contacts/edit-photo-button/index.tsx","components/signup-form/businessInfoForm.tsx","components/signup-form/Confirmation.tsx","containers/signup/index.tsx","pages/signup.tsx"],"names":["StyledWrap2","styled","div","props","pb","StyledWrap","Container","size","Row","md","justify","align","sm","lg","xl","StyledTitle","h3","themeGet","StyledDesc","p","StyledDivider","StyledBottomText","SigninForm","handleChange","useForm","register","handleSubmit","errors","formState","action","onSubmit","data","console","log","JSON","stringify","noValidate","mb","display","htmlFor","id","type","placeholder","feedbackText","first_name","message","state","hasKey","showState","required","minLength","value","last_name","phone_number","pattern","email","fontSize","color","fullwidth","path","rest","device","large","xlarge","StyledSignUp","StyledSignUpContainer2","StyledSignin","StepsContainer","ul","Steps","className","current","h5","small","StyledLeft","StyledAvatar","_extends","Object","assign","target","i","arguments","length","source","key","prototype","hasOwnProperty","call","apply","this","_objectWithoutProperties","excluded","sourceKeys","keys","indexOf","_objectWithoutPropertiesLoose","getOwnPropertySymbols","sourceSymbolKeys","propertyIsEnumerable","Edit2","forwardRef","_ref","ref","_ref$color","_ref$size","React","createElement","xmlns","width","height","viewBox","fill","stroke","strokeWidth","strokeLinecap","strokeLinejoin","d","propTypes","PropTypes","string","oneOfType","number","displayName","StyledEditPhoto","button","ContactEditPhoto","onClick","BusinessInfoForm","fileUploadRef","useRef","useState","images","setimages","country","city","index","address","branch_address","setbranch_address","src","URL","createObjectURL","bg","fontWeight","click","onChange","e","files","accept","style","company_name","legal_name","director_name","pl","mt","label","name","description","company_address","website","bank_account","inn","identification_number","nds","oked","delivery_options","hidden","account_type","mfo_bank","map","one","ind","branch","handleCountryChange","handleCityChange","handleZIPChange","handleAddressChange","array","splice","removeBranchAddress","push","addBranchAddress","Confirmation","AuthContainer","step","setstep","changeStep","SignUp","fullHeight"],"mappings":"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","file":"static/js/7.2bb91797.chunk.js","sourcesContent":["/* eslint-disable jsx-a11y/label-has-associated-control */\r\nimport styled, { themeGet } from \"@doar/shared/styled\";\r\n\r\ninterface RowProps{\r\n    md?:string | number,\r\n    sm?:string| number,\r\n    lg?:string| number,\r\n    xl?:string| number,\r\n    align?:string| number,\r\n    justify?:string| number,\r\n}\r\n\r\ninterface StyledWrap2Props{\r\n    pb?:string\r\n}\r\n\r\n\r\ninterface ContainerProps{\r\n    size?:number\r\n}\r\nexport const StyledWrap2 = styled.div<StyledWrap2Props>`\r\n    width: 100%;\r\n    padding-top: 20px;\r\n    padding-bottom: ${props=>props.pb};\r\n`;\r\n\r\nexport const StyledWrap = styled.div`\r\n    width: 100%;\r\n    padding-top: 20px;\r\n`;\r\nexport const Container = styled.div<ContainerProps>`\r\n    display: flex;\r\n    flex-wrap: wrap;\r\n    flex:${props => props.size};\r\n`;\r\n\r\n\r\n\r\n\r\n\r\nexport const Row = styled.div<RowProps>`\r\n  width: ${props => props.md || 50}%;\r\n  padding-right: 10px;\r\n  justify-content: ${props=>props.justify||'unset'};\r\n  align-items: ${props=>props.align || 'unset'};\r\n  @media screen and (max-width:576px){\r\n    width: ${props => props.sm || 100}%;\r\n  }\r\n  @media screen and (max-width:768px) and (min-width: 576px){\r\n    width: ${props => props.sm || 100}%;\r\n  }\r\n  @media screen and (max-width:992px) and (min-width: 768px){\r\n    width: ${props => props.md || 50}%;\r\n  }\r\n  @media screen and (max-width:1200px) and (min-width: 992px){\r\n    width: ${props => props.lg || 50}%;\r\n  }\r\n  @media screen and (min-width: 1200px){\r\n    width: ${props => props.xl || 50}%;\r\n  }\r\n  \r\n`;\r\n\r\n\r\ninterface StyledTitleProps{\r\n    align?:string\r\n}\r\nexport const StyledTitle = styled.h3<StyledTitleProps>`\r\n    color: ${themeGet(\"colors.text\")};\r\n    margin-bottom: 5px;\r\n    text-align: ${props=>props.align || 'unset'};\r\n`;\r\n\r\n\r\n\r\n\r\nexport const StyledDesc = styled.p`\r\n    font-size: 16px;\r\n    color: ${themeGet(\"colors.text3\")};\r\n    margin-bottom: 40px;\r\n`;\r\n\r\nexport const StyledLabelWrap = styled.div`\r\n    margin-bottom: 5px;\r\n    justify-content: space-between;\r\n    display: flex;\r\n`;\r\n\r\nexport const StyledDivider = styled.div`\r\n    position: relative;\r\n    display: flex;\r\n    align-items: center;\r\n    text-transform: uppercase;\r\n    color: ${themeGet(\"colors.text3\")};\r\n    font-size: 10px;\r\n    font-weight: 500;\r\n    font-family: ${themeGet(\"fonts.interui\")};\r\n    letter-spacing: 0.5px;\r\n    margin: 15px 0;\r\n    &:after,\r\n    &:before {\r\n        content: \"\";\r\n        display: block;\r\n        flex: 1;\r\n        height: 1px;\r\n        background-color: ${themeGet(\"colors.light\")};\r\n    }\r\n    &:before {\r\n        margin-right: 10px;\r\n    }\r\n    &:after {\r\n        margin-left: 10px;\r\n    }\r\n`;\r\n\r\nexport const StyledBottomText = styled.div`\r\n    margin-top: 20px;\r\n    text-align: center;\r\n    font-size: 13px;\r\n`;\r\n","import { FC } from \"react\";\r\nimport {\r\n    Label,\r\n    FormGroup,\r\n    Input,\r\n    Anchor,\r\n    Button,\r\n    Text,\r\n} from \"@doar/components\";\r\nimport { useForm } from \"react-hook-form\";\r\nimport { hasKey } from \"@doar/shared/methods\";\r\nimport {\r\n    StyledWrap,\r\n    StyledTitle,\r\n    StyledDesc,\r\n    StyledDivider,\r\n    StyledBottomText,\r\n    Container,\r\n    Row\r\n} from \"./style\";\r\n\r\n\r\n\r\ninterface SignUpProps{\r\n    handleChange?:any\r\n}\r\n\r\n\r\ninterface IFormValues {\r\n    email: string;\r\n    password: string;\r\n    first_name: string;\r\n    last_name: string;\r\n}\r\n\r\nconst SigninForm: FC<SignUpProps> = ({handleChange}) => {\r\n    const {\r\n        register,\r\n        handleSubmit,\r\n        formState: { errors },\r\n    } = useForm();\r\n\r\n    const onSubmit = (data: IFormValues) => {\r\n        console.log(JSON.stringify(data, null));\r\n        handleChange()\r\n    };\r\n\r\n    return (\r\n        <StyledWrap>\r\n            <StyledTitle>Create New Account</StyledTitle>\r\n            <StyledDesc>\r\n                It&apos;s free to signup and only takes a minute.\r\n            </StyledDesc>\r\n            <form action=\"#\" onSubmit={handleSubmit(onSubmit)} noValidate>\r\n                <Container>\r\n                    <Row>\r\n                        <FormGroup mb=\"20px\">\r\n                            <Label display=\"block\" mb=\"5px\" htmlFor=\"first_name\">\r\n                                Firstname\r\n                            </Label>\r\n                            <Input\r\n                                id=\"first_name\"\r\n                                type=\"text\"\r\n                                placeholder=\"Enter your firstname\"\r\n                                feedbackText={errors?.first_name?.message}\r\n                                state={\r\n                                    hasKey(errors, \"first_name\") ? \"error\" : \"success\"\r\n                                }\r\n                                showState={!!hasKey(errors, \"first_name\")}\r\n                                {...register(\"first_name\", {\r\n                                    required: \"First Name is required\",\r\n                                    minLength: {\r\n                                        value: 2,\r\n                                        message: \"Minimum length is 2\",\r\n                                    },\r\n                                })}\r\n                            />\r\n                        </FormGroup>\r\n                    </Row>\r\n                    <Row>\r\n                        <FormGroup mb=\"20px\">\r\n                            <Label display=\"block\" mb=\"5px\" htmlFor=\"last_name\">\r\n                                Lastname\r\n                            </Label>\r\n                            <Input\r\n                                id=\"last_name\"\r\n                                type=\"text\"\r\n                                placeholder=\"Enter your Lastname\"\r\n                                feedbackText={errors?.last_name?.message}\r\n                                state={\r\n                                    hasKey(errors, \"last_name\") ? \"error\" : \"success\"\r\n                                }\r\n                                showState={!!hasKey(errors, \"last_name\")}\r\n                                {...register(\"last_name\", {\r\n                                    required: \"Last Name is required\",\r\n                                    minLength: {\r\n                                        value: 2,\r\n                                        message: \"Minimum length is 2\",\r\n                                    },\r\n                                })}\r\n                            />\r\n                        </FormGroup>\r\n                    </Row>\r\n                </Container>\r\n               <Container size={2}>\r\n                    <Row>\r\n                      <FormGroup mb=\"20px\" >\r\n                          <Label display=\"block\" mb=\"5px\" htmlFor=\"email\">\r\n                              Telephone Number\r\n                          </Label>\r\n                          <Input\r\n                              id=\"phone_number\"\r\n                              type=\"text\"\r\n                              placeholder=\"Enter your telephone number\"\r\n                              feedbackText={errors?.phone_number?.message}\r\n                              state={hasKey(errors, \"phone_number\") ? \"error\" : \"success\"}\r\n                              showState={!!hasKey(errors, \"phone_number\")}\r\n                              {...register(\"phone_number\", {\r\n                                  required: \"Telephone number is required\",\r\n                                  pattern: {\r\n                                      value: /[+998]{3}[0-9]{2}[0-9]{8}/i,\r\n                                      message: \"invalid phone number\",\r\n                                  },\r\n                              })}\r\n                          />\r\n                      </FormGroup>\r\n                    </Row>\r\n                    <Row>\r\n                       <FormGroup mb=\"20px\">\r\n                           <Label display=\"block\" mb=\"5px\" htmlFor=\"password\">\r\n                               Company Email\r\n                           </Label>\r\n                           <Input\r\n                               id=\"email\"\r\n                               type=\"text\"\r\n                               placeholder=\"Enter your email address\"\r\n                               feedbackText={errors?.email?.message}\r\n                               state={hasKey(errors, \"email\") ? \"error\" : \"success\"}\r\n                               showState={!!hasKey(errors, \"email\")}\r\n                               {...register(\"email\", {\r\n                                   required: \"Email is required\",\r\n                                   pattern: {\r\n                                       value: /^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i,\r\n                                       message: \"invalid email address\",\r\n                                   },\r\n                               })}\r\n                           />\r\n                       </FormGroup>\r\n                   </Row>\r\n               </Container>\r\n\r\n                   <FormGroup mb=\"20px\">\r\n                       <Text fontSize=\"12px\">\r\n                           By clicking <strong>Create an account</strong> below,\r\n                           you agree to our terms of service and privacy statement.\r\n                       </Text>\r\n                   </FormGroup>\r\n\r\n                <Container>\r\n                    <Row sm=\"100\" md=\"100\" lg=\"100\" xl=\"100\">\r\n                        <FormGroup>\r\n                            <Button type=\"submit\" color=\"brand2\" fullwidth>\r\n                                Next\r\n                            </Button>\r\n                        </FormGroup>\r\n                    </Row>\r\n                </Container>\r\n\r\n\r\n                <StyledBottomText>\r\n                    Don&apos;t have an account?{\" \"}\r\n                    <Anchor path=\"/signin\">Sign In</Anchor>\r\n                </StyledBottomText>\r\n            </form>\r\n        </StyledWrap>\r\n    );\r\n};\r\n\r\nexport default SigninForm;\r\n\r\n\r\n\r\n{/*<Container size={2}>*/}\r\n{/*    <Row>*/}\r\n{/*        <FormGroup mb=\"20px\" >*/}\r\n{/*            <Label display=\"block\" mb=\"5px\" htmlFor=\"email\">*/}\r\n{/*                Password*/}\r\n{/*            </Label>*/}\r\n{/*            <Input*/}\r\n{/*                id=\"password\"*/}\r\n{/*                type=\"password\"*/}\r\n{/*                placeholder=\"Enter your password\"*/}\r\n{/*                feedbackText={errors?.password?.message}*/}\r\n{/*                state={hasKey(errors, \"password\") ? \"error\" : \"success\"}*/}\r\n{/*                showState={!!hasKey(errors, \"password\")}*/}\r\n{/*                {...register(\"password\", {*/}\r\n{/*                    required: \"Password is required\",*/}\r\n{/*                    minLength: {*/}\r\n{/*                        value: 6,*/}\r\n{/*                        message: \"Minimum length is 6\",*/}\r\n{/*                    },*/}\r\n{/*                    maxLength: {*/}\r\n{/*                        value: 10,*/}\r\n{/*                        message: \"Minimum length is 10\",*/}\r\n{/*                    },*/}\r\n{/*                })}*/}\r\n{/*            />*/}\r\n{/*        </FormGroup>*/}\r\n{/*    </Row>*/}\r\n{/*    <Row>*/}\r\n{/*        <FormGroup mb=\"20px\">*/}\r\n{/*            <Label display=\"block\" mb=\"5px\" htmlFor=\"password\">*/}\r\n{/*                Confirmation Password*/}\r\n{/*            </Label>*/}\r\n{/*            <Input*/}\r\n{/*                id=\"confirmation_password\"*/}\r\n{/*                type=\"password\"*/}\r\n{/*                placeholder=\"Enter your confirmation_password\"*/}\r\n{/*                feedbackText={errors?.confirmation_password?.message}*/}\r\n{/*                state={hasKey(errors, \"confirmation_password\") ? \"error\" : \"success\"}*/}\r\n{/*                showState={!!hasKey(errors, \"confirmation_password\")}*/}\r\n{/*                {...register(\"confirmation_password\", {*/}\r\n{/*                    required: \"Password is required\",*/}\r\n{/*                })}*/}\r\n{/*            />*/}\r\n{/*        </FormGroup>*/}\r\n{/*    </Row>*/}\r\n{/*</Container>*/}\r\n","import styled, { device } from \"@doar/shared/styled\";\r\nimport { Media, MediaBody } from \"@doar/components\";\r\n\r\nexport const StyledMedia = styled(({ ...rest }) => <Media {...rest} />)`\r\n    height: 100%;\r\n    align-items: stretch;\r\n    justify-content: center;\r\n`;\r\n\r\nexport const StyledMediaBody = styled(({ ...rest }) => <MediaBody {...rest} />)`\r\n    display: none;\r\n    ${device.large} {\r\n        display: flex;\r\n        position: relative;\r\n        align-items: center;\r\n        padding-left: 50px;\r\n        padding-right: 50px;\r\n    }\r\n    ${device.xlarge} {\r\n        padding-left: 60px;\r\n        padding-right: 60px;\r\n    }\r\n`;\r\n\r\nexport const StyledImage = styled.div``;\r\n\r\nexport const StyledImgText = styled.div`\r\n    font-size: 12px;\r\n    text-align: center;\r\n    right: 0px;\r\n    bottom: -10px;\r\n    position: absolute;\r\n`;\r\n\r\n\r\nexport const StyledSignUp = styled.div`\r\n  ${device.large} {\r\n    margin-right: 50px;\r\n  }\r\n  ${device.xlarge} {\r\n    margin-right: 60px;\r\n  }\r\n`;\r\n\r\nexport const StyledSignUpContainer2 = styled.div`\r\n`;\r\n\r\n\r\nexport const StyledSignin = styled.div`\r\n    display: flex;\r\n    justify-content: center;\r\n    align-items: center;\r\n    ${device.large} {\r\n        margin-right: 50px;\r\n    }\r\n    ${device.xlarge} {\r\n        margin-right: 60px;\r\n    }\r\n`;\r\n","import styled from \"@doar/shared/dist/styled\";\r\n\r\nlet StepsContainer = styled.ul`\r\n  counter-reset: step;\r\n  & > li{\r\n    list-style: none;\r\n    display: inline-block;\r\n    width: 31%;\r\n    position: relative;\r\n    text-align: center;\r\n    cursor: pointer;\r\n  }\r\n  & > li:before{\r\n    content: counter(step);\r\n    counter-increment: step;\r\n    width: 25px;\r\n    height: 25px;\r\n    line-height : 25px;\r\n    border: 1px solid #ddd;\r\n    border-radius: 100%;\r\n    display: block;\r\n    text-align: center;\r\n    margin: 0 auto 10px auto;\r\n    background-color: #fff;\r\n  }\r\n  & > li:after{\r\n    content: \"\";\r\n    position: absolute;\r\n    width: 100%;\r\n    height: 1px;\r\n    background-color: #ddd;\r\n    top: 15px;\r\n    left: -50%;\r\n    z-index : -1;\r\n  }\r\n  & > li.current:before{\r\n    content: counter(step);\r\n    counter-increment: step;\r\n    width: 25px;\r\n    height: 25px;\r\n    line-height : 25px;\r\n    border: 1px solid green;\r\n    border-radius: 100%;\r\n    display: block;\r\n    text-align: center;\r\n    margin: 0 auto 10px auto;\r\n    background-color: #fff;\r\n    font-size: small;\r\n  }\r\n  & > li.active:before{\r\n    content: \"✔\";\r\n    width: 25px;\r\n    height: 25px;\r\n    line-height : 25px;\r\n    border: 1px solid green;\r\n    border-radius: 100%;\r\n    display: block;\r\n    text-align: center;\r\n    margin: 0 auto 10px auto;\r\n    background-color: #fff;\r\n    font-size: small;\r\n  }\r\n  & > li:first-child:after{\r\n    content: none;\r\n    color: green;\r\n  }\r\n  & > li.active{\r\n    color: green;\r\n  }\r\n  & > li.active:before{\r\n    color: green;\r\n  }\r\n  & > li.active + li:after {\r\n    background-color: green;\r\n  }\r\n  \r\n`;\r\n\r\nexport default StepsContainer\r\n","import StepsContainer from \"./styles\";\r\n\r\nlet Steps = (props:any)=>{\r\n        return (\r\n        <StepsContainer >\r\n                <li className={props.current >= 1 ? `${props.current > 1 && 'active'} current ` : \"\"}>Personal</li>\r\n                <li className={props.current >= 2 ? `${props.current > 2 &&'active'} current ` : \"\"}>Business</li>\r\n                <li className={props.current >= 3 ? `${props.current > 3 &&'active'} current ` : \"\"}>Confirmation</li>\r\n        </StepsContainer>\r\n        )\r\n}\r\nexport default Steps","import styled, { device, themeGet } from \"@doar/shared/styled\";\nimport { ModalClose } from \"@doar/components\";\n\nexport const StyledClose = styled(({ ...rest }) => <ModalClose {...rest} />)`\n    position: absolute;\n    top: 15px;\n    right: 20px;\n`;\n\nexport const StyledTitle = styled.h5`\n    font-size: 18px;\n    margin-bottom: 20px;\n    ${device.small} {\n        font-size: 20px;\n    }\n`;\n\nexport const StyledDesc = styled.p`\n    font-size: 13px;\n    color: ${themeGet(\"colros.text3\")};\n    margin-bottom: 30px;\n`;\n\nexport const StyledWrap = styled.div`\n    ${device.small} {\n        display: flex;\n    }\n`;\n\nexport const StyledLeft = styled.div`\n    ${device.small} {\n        margin-right: 30px;\n    }\n`;\n\nexport const StyledRight = styled.div`\n    flex: 1 1 auto;\n`;\n\nexport const StyledAvatar = styled.div`\n    position: relative;\n    margin-bottom: 20px;\n    display: inline-block;\n`;\n\nexport const StyledGroup = styled.div`\n    margin-bottom: 10px;\n`;\n","function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport React, { forwardRef } from 'react';\nimport PropTypes from 'prop-types';\nvar Edit2 = forwardRef(function (_ref, ref) {\n  var _ref$color = _ref.color,\n      color = _ref$color === void 0 ? 'currentColor' : _ref$color,\n      _ref$size = _ref.size,\n      size = _ref$size === void 0 ? 24 : _ref$size,\n      rest = _objectWithoutProperties(_ref, [\"color\", \"size\"]);\n\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    ref: ref,\n    xmlns: \"http://www.w3.org/2000/svg\",\n    width: size,\n    height: size,\n    viewBox: \"0 0 24 24\",\n    fill: \"none\",\n    stroke: color,\n    strokeWidth: \"2\",\n    strokeLinecap: \"round\",\n    strokeLinejoin: \"round\"\n  }, rest), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M17 3a2.828 2.828 0 1 1 4 4L7.5 20.5 2 22l1.5-5.5L17 3z\"\n  }));\n});\nEdit2.propTypes = {\n  color: PropTypes.string,\n  size: PropTypes.oneOfType([PropTypes.string, PropTypes.number])\n};\nEdit2.displayName = 'Edit2';\nexport default Edit2;","import styled, { themeGet } from \"@doar/shared/styled\";\n\nexport const StyledEditPhoto = styled.button`\n    background-color: transparent;\n    border: none;\n    padding: 0;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    flex-shrink: 0;\n    width: 24px;\n    height: 24px;\n    background-color: ${themeGet(\"colors.light\")};\n    color: ${themeGet(\"colors.text3\")};\n    border-radius: 100%;\n    position: absolute;\n    bottom: 0;\n    right: 0;\n    box-shadow: 0 0 0 3px #fff;\n    svg {\n        width: 12px;\n        stroke-width: 3px;\n    }\n`;\n","import { FC } from \"react\";\nimport { Edit2 } from \"react-feather\";\nimport { StyledEditPhoto } from \"./style\";\n\ninterface ContactEditPhotoProps{\n    ref?:any\n    onClick?:any,\n    type?:'button' |'submit'| 'reset'\n}\n\nconst ContactEditPhoto: FC<ContactEditPhotoProps> = ({ref,onClick,type}) => {\n    return (\n        <StyledEditPhoto ref={ref} onClick={onClick} type={type}>\n            <Edit2 />\n        </StyledEditPhoto>\n    );\n};\n\nexport default ContactEditPhoto;\n","import {FC, useRef, useState} from \"react\";\r\nimport {useForm} from \"react-hook-form\";\r\nimport {\r\n    Container,\r\n    Row,\r\n    StyledBottomText,\r\n    StyledDesc,\r\n    StyledDivider,\r\n    StyledTitle,\r\n    StyledWrap\r\n} from \"./style\";\r\nimport {\r\n    Anchor,\r\n    Button,\r\n    FormGroup,\r\n    Input,\r\n    Label,\r\n    Text,\r\n    Radio, Textarea, Select\r\n} from \"@doar/components\";\r\nimport {hasKey} from \"@doar/shared/dist/methods\";\r\nimport {\r\n    Avatar,\r\n    AvatarInitial\r\n} from '@doar/components'\r\nimport {\r\n    StyledLeft,\r\n    StyledAvatar\r\n} from '@doar/components/src/apps/contacts/modal-edit/style'\r\nimport ContactEditPhoto from \"../apps/contacts/edit-photo-button\";\r\n\r\n\r\n\r\n\r\ninterface BusinessInfoFormProps{\r\n    handleChange:any\r\n}\r\n\r\n\r\ninterface IFormValues {\r\n    main_image: string;\r\n    company_name: string;\r\n    legal_name: string;\r\n    business_name: string;\r\n    type_business:boolean;\r\n    description:string;\r\n    address:string;\r\n    director_full_name:string;\r\n    bank_account:string;\r\n    inn:string;\r\n    identification_number:string;\r\n    nds:string;\r\n    oked:string;\r\n    account_type:string;\r\n    mfo_bank:string;\r\n    delivery_type:string;\r\n    website:string;\r\n    branch:[{\r\n        country:string;\r\n        city:string;\r\n        index:number;\r\n        address:string;\r\n    }]\r\n\r\n}\r\n\r\nlet BusinessInfoForm:FC<BusinessInfoFormProps>= ({handleChange})=>{\r\n    let fileUploadRef = useRef<HTMLInputElement>(null)\r\n    let [images,setimages] = useState<any>([])\r\n    const {\r\n        register,\r\n        handleSubmit,\r\n        formState: { errors },\r\n    } = useForm();\r\n    let [branch_address,setbranch_address] = useState([{\r\n        country:\"\",\r\n        city:\"\",\r\n        index:\"\",\r\n        address:\"\",\r\n    }])\r\n    console.log(branch_address)\r\n    let addBranchAddress = ()=>{\r\n        let array = [...branch_address]\r\n        array.push({\r\n            country:\"\",\r\n            city:\"\",\r\n            index:\"\",\r\n            address:\"\"\r\n        })\r\n        setbranch_address(array)\r\n    }\r\n    let handleCountryChange = (e:any,ind:any)=>{\r\n        let branch:any = [...branch_address]\r\n        branch[ind].country = e.target.value\r\n        setbranch_address(branch)\r\n    }\r\n    let handleCityChange = (e:any,ind:any)=>{\r\n        let branch:any = [...branch_address]\r\n        branch[ind].city = e.target.value\r\n        setbranch_address(branch)\r\n    }\r\n    let handleAddressChange = (e:any,ind:any)=>{\r\n        let branch:any = [...branch_address]\r\n        branch[ind].address = e.target.value\r\n        setbranch_address(branch)\r\n    }\r\n    let handleZIPChange = (e:any,ind:any)=>{\r\n        let branch:any = [...branch_address]\r\n        branch[ind].index = e.target.value\r\n        setbranch_address(branch)\r\n    }\r\n    let removeBranchAddress = (ind:number)=>{\r\n        let array = [...branch_address]\r\n        array.splice(ind-1,1)\r\n        setbranch_address(array)\r\n    }\r\n    const onSubmit = (data: IFormValues) => {\r\n        console.log(JSON.stringify(data, null));\r\n        handleChange()\r\n    };\r\n    let handleButtonClick = ()=>{\r\n        fileUploadRef?.current?.click()\r\n    }\r\n\r\n    return (\r\n        <StyledWrap>\r\n            <StyledTitle>Business account</StyledTitle>\r\n\r\n            <form action=\"#\" onSubmit={handleSubmit(onSubmit)} noValidate>\r\n                <Container>\r\n                    <Row>\r\n                        <StyledLeft>\r\n                            <StyledAvatar>\r\n                              <Avatar size='xxl'>\r\n                                  {images.length!==0 ?<img  src={URL.createObjectURL(images)}/>:\r\n                                  <AvatarInitial bg=\"gray700\" fontWeight={400}>\r\n                                      A\r\n                                  </AvatarInitial>\r\n                                  }\r\n                              </Avatar>\r\n\r\n                                <ContactEditPhoto type='button'  onClick={handleButtonClick} />\r\n                                <input ref={fileUploadRef} onChange={(e:any)=>setimages(e.target.files[0])} accept='image/*' type='file' style={{display:'none'}}/>\r\n                            </StyledAvatar>\r\n                        </StyledLeft>\r\n                    </Row>\r\n                </Container>\r\n                <Container>\r\n                    <Row>\r\n                        <FormGroup mb=\"20px\">\r\n                            <Label display=\"block\" mb=\"5px\" htmlFor=\"company_name\">\r\n                                Business name\r\n                            </Label>\r\n                            <Input\r\n                                id=\"company_name\"\r\n                                type=\"text\"\r\n                                placeholder=\"Enter your company name\"\r\n                                feedbackText={errors?.company_name?.message}\r\n                                state={\r\n                                    hasKey(errors, \"company_name\") ? \"error\" : \"success\"\r\n                                }\r\n                                showState={!!hasKey(errors, \"company_name\")}\r\n                                {...register(\"company_name\", {\r\n                                    required: \"Company Name is required\",\r\n                                })}\r\n                            />\r\n                        </FormGroup>\r\n                    </Row>\r\n                    <Row>\r\n                        <FormGroup mb=\"20px\">\r\n                            <Label display=\"block\" mb=\"5px\" htmlFor=\"legal_name\">\r\n                                Legal name\r\n                            </Label>\r\n                            <Input\r\n                                id=\"legal_name\"\r\n                                type=\"text\"\r\n                                placeholder=\"Enter your legal name\"\r\n                                feedbackText={errors?.legal_name?.message}\r\n                                state={\r\n                                    hasKey(errors, \"legal_name\") ? \"error\" : \"success\"\r\n                                }\r\n                                showState={!!hasKey(errors, \"legal_name\")}\r\n                                {...register(\"legal_name\", {\r\n                                    required: \"Legal Name is required\",\r\n                                })}\r\n                            />\r\n                        </FormGroup>\r\n                    </Row>\r\n                    <Row>\r\n                        <FormGroup mb=\"20px\" >\r\n                            <Label display=\"block\" mb=\"5px\" htmlFor=\"director_name\">\r\n                                Name of chairman of business\r\n                            </Label>\r\n                            <Input\r\n                                id=\"director_name\"\r\n                                type=\"text\"\r\n                                placeholder=\"Enter name of chairman of business\"\r\n                                feedbackText={errors?.director_name?.message}\r\n                                state={hasKey(errors, \"director_name\") ? \"error\" : \"success\"}\r\n                                showState={!!hasKey(errors, \"director_name\")}\r\n                                {...register(\"director_name\", {\r\n                                    required: \"director name is required\"\r\n                                })}\r\n                            />\r\n                        </FormGroup>\r\n                    </Row>\r\n                    <Row>\r\n                       <FormGroup mb=\"15px\">\r\n                           <Label display=\"block\" mb=\"20px\" htmlFor=\"business_type\">\r\n                               Business type\r\n                           </Label>\r\n                           <Container>\r\n                               <Row><Radio value='Individual' pl='1rem' mt=\"8px\" label='Individual' id='Individual' name='business_type'/></Row>\r\n                               <Row><Radio value='Other' label='Other' mt=\"8px\" id='Other' name='business_type'/></Row>\r\n                           </Container>\r\n                       </FormGroup>\r\n                    </Row>\r\n                    <Row sm=\"100\" md=\"100\" lg=\"100\" xl=\"100\">\r\n                        <FormGroup mb='20px'>\r\n                            <Label display=\"block\" mb=\"5px\" htmlFor=\"director_name\">\r\n                                Name of chairman of business\r\n                            </Label>\r\n                            <Textarea\r\n                                id=\"description\"\r\n                                feedbackText={errors?.description?.message}\r\n                                state={hasKey(errors, \"description\") ? \"error\" : \"success\"}\r\n                                showState={!!hasKey(errors, \"description\")}\r\n                                {...register(\"description\", {\r\n                                    required: \"description is required\",\r\n                                })}\r\n                            />\r\n                        </FormGroup>\r\n                    </Row>\r\n                    <Row>\r\n                        <FormGroup mb=\"20px\" >\r\n                            <Label display=\"block\" mb=\"5px\" htmlFor=\"company_address\">\r\n                                Company Address\r\n                            </Label>\r\n                            <Input\r\n                                id=\"company_address\"\r\n                                type=\"text\"\r\n                                placeholder=\"Enter your company address\"\r\n                                feedbackText={errors?.company_address?.message}\r\n                                state={hasKey(errors, \"company_address\") ? \"error\" : \"success\"}\r\n                                showState={!!hasKey(errors, \"company_address\")}\r\n                                {...register(\"company_address\", {\r\n                                    required: \"company address is required\",\r\n                                })}\r\n                            />\r\n                        </FormGroup>\r\n                    </Row>\r\n                    <Row>\r\n                        <FormGroup mb=\"20px\">\r\n                            <Label display=\"block\" mb=\"5px\" htmlFor=\"password\">\r\n                                Website\r\n                            </Label>\r\n                            <Input\r\n                                id=\"website\"\r\n                                type=\"text\"\r\n                                placeholder=\"Enter your website\"\r\n                                feedbackText={errors?.website?.message}\r\n                                state={hasKey(errors, \"website\") ? \"error\" : \"success\"}\r\n                                showState={!!hasKey(errors, \"website\")}\r\n                                {...register(\"website\", {\r\n                                    pattern: {\r\n                                        value: /[(http(s)?):\\/\\/(www\\.)?a-zA-Z0-9@:%._\\+~#=]{2,256}\\.[a-z]{2,6}\\b([-a-zA-Z0-9@:%_\\+.~#?&//=]*)/i,\r\n                                        message: \"invalid url\",\r\n                                    },\r\n                                })}\r\n                            />\r\n                        </FormGroup>\r\n                    </Row>\r\n                    <Row>\r\n                        <FormGroup mb=\"20px\" >\r\n                            <Label display=\"block\" mb=\"5px\" htmlFor=\"bank_account\">\r\n                                Bank account\r\n                            </Label>\r\n                            <Input\r\n                                id=\"bank_account\"\r\n                                type=\"text\"\r\n                                placeholder=\"Enter your bank account\"\r\n                                feedbackText={errors?.bank_account?.message}\r\n                                state={hasKey(errors, \"bank_account\") ? \"error\" : \"success\"}\r\n                                showState={!!hasKey(errors, \"bank_account\")}\r\n                                {...register(\"bank_account\", {\r\n                                    required: \"bank account is required\",\r\n                                })}\r\n                            />\r\n                        </FormGroup>\r\n                    </Row>\r\n                    <Row>\r\n                        <FormGroup mb=\"20px\" >\r\n                            <Label display=\"block\" mb=\"5px\" htmlFor=\"inn\">\r\n                                INN\r\n                            </Label>\r\n                            <Input\r\n                                id=\"inn\"\r\n                                type=\"text\"\r\n                                placeholder=\"Enter your INN\"\r\n                                feedbackText={errors?.inn?.message}\r\n                                state={hasKey(errors, \"inn\") ? \"error\" : \"success\"}\r\n                                showState={!!hasKey(errors, \"inn\")}\r\n                                {...register(\"inn\", {\r\n                                    required: \"INN is required\",\r\n                                })}\r\n                            />\r\n                        </FormGroup>\r\n                    </Row>\r\n                    <Row>\r\n                        <FormGroup mb=\"20px\" >\r\n                            <Label display=\"block\" mb=\"5px\" htmlFor=\"identification_number\">\r\n                                Identification number\r\n                            </Label>\r\n                            <Input\r\n                                id=\"identification_number\"\r\n                                type=\"text\"\r\n                                placeholder=\"Enter your Identification number\"\r\n                                feedbackText={errors?.identification_number?.message}\r\n                                state={hasKey(errors, \"identification_number\") ? \"error\" : \"success\"}\r\n                                showState={!!hasKey(errors, \"identification_number\")}\r\n                                {...register(\"identification_number\", {\r\n                                    required: \"Identification number is required\",\r\n                                })}\r\n                            />\r\n                        </FormGroup>\r\n                    </Row>\r\n                    <Row>\r\n                        <FormGroup mb=\"20px\" >\r\n                            <Label display=\"block\" mb=\"5px\" htmlFor=\"nds\">\r\n                                NDS\r\n                            </Label>\r\n                            <Input\r\n                                id=\"nds\"\r\n                                type=\"text\"\r\n                                placeholder=\"Enter your NDS\"\r\n                                feedbackText={errors?.nds?.message}\r\n                                state={hasKey(errors, \"nds\") ? \"error\" : \"success\"}\r\n                                showState={!!hasKey(errors, \"nds\")}\r\n                                {...register(\"nds\", {\r\n                                    required: \"NDS is required\",\r\n                                })}\r\n                            />\r\n                        </FormGroup>\r\n                    </Row>\r\n\r\n                    <Row>\r\n                        <FormGroup mb=\"20px\" >\r\n                            <Label display=\"block\" mb=\"5px\" htmlFor=\"oked\">\r\n                                OKED\r\n                            </Label>\r\n                            <Input\r\n                                id=\"oked\"\r\n                                type=\"text\"\r\n                                placeholder=\"Enter your OKED\"\r\n                                feedbackText={errors?.oked?.message}\r\n                                state={hasKey(errors, \"oked\") ? \"error\" : \"success\"}\r\n                                showState={!!hasKey(errors, \"oked\")}\r\n                                {...register(\"oked\", {\r\n                                    required: \"OKED is required\",\r\n                                })}\r\n                            />\r\n                        </FormGroup>\r\n                    </Row>\r\n                    <Row>\r\n                        <FormGroup mb=\"20px\" >\r\n                            <Label display=\"block\" mb=\"5px\" htmlFor=\"delivery_options\">\r\n                                Delivery Options\r\n                            </Label>\r\n                            <Select\r\n                                id='delivery_options'\r\n                                feedbackText={errors?.delivery_options?.message}\r\n                                state={hasKey(errors, \"delivery_options\") ? \"error\" : \"success\"}\r\n                                showState={!!hasKey(errors, \"delivery_options\")}\r\n                                {...register(\"delivery_options\", {\r\n                                    required: \"Delivery Options is required\",\r\n                                })}\r\n                            >\r\n                                <option hidden={true} value='Delivery Options is required'></option>\r\n                            </Select>\r\n\r\n                        </FormGroup>\r\n                    </Row>\r\n\r\n                    <Row>\r\n                        <FormGroup mb=\"20px\" >\r\n                            <Label display=\"block\" mb=\"5px\" htmlFor=\"account_type\">\r\n                                Account type\r\n                            </Label>\r\n                            <Select\r\n                                id='account_type'\r\n                                feedbackText={errors?.account_type?.message}\r\n                                state={hasKey(errors, \"account_type\") ? \"error\" : \"success\"}\r\n                                showState={!!hasKey(errors, \"account_type\")}\r\n                                {...register(\"account_type\", {\r\n                                    required: \"account_type is required\",\r\n                                })}\r\n                            >\r\n                                <option hidden={true} value='account_type is required'></option>\r\n                            </Select>\r\n\r\n                        </FormGroup>\r\n                    </Row>\r\n                    <Row>\r\n                        <FormGroup mb=\"20px\" >\r\n                            <Label display=\"block\" mb=\"5px\" htmlFor=\"mfo_bank\">\r\n                                MFO bank\r\n\r\n                            </Label>\r\n                            <Input\r\n                                id=\"mfo_bank\"\r\n                                type=\"text\"\r\n                                placeholder=\"Enter your MFO bank\"\r\n                                feedbackText={errors?.mfo_bank?.message}\r\n                                state={hasKey(errors, \"mfo_bank\") ? \"error\" : \"success\"}\r\n                                showState={!!hasKey(errors, \"mfo_bank\")}\r\n                                {...register(\"mfo_bank\", {\r\n                                    required: \"MFO bank is required\",\r\n                                })}\r\n                            />\r\n                        </FormGroup>\r\n                    </Row>\r\n\r\n                </Container>\r\n                <StyledDivider>Branch Address</StyledDivider>\r\n\r\n                {branch_address.map((one,ind)=>(\r\n                    <Container>\r\n                        <Row>\r\n                            <FormGroup mb=\"20px\" >\r\n                                <Label display=\"block\" mb=\"5px\" htmlFor=\"country\">\r\n                                    Country\r\n                                </Label>\r\n                                <Select\r\n                                    name='country'\r\n                                    id='country'\r\n                                    onChange={(e)=>handleCountryChange(e,ind)}\r\n                                    feedbackText={errors?.country?.message}\r\n                                    state={hasKey(errors, \"country\") ? \"error\" : \"success\"}\r\n                                    showState={!!hasKey(errors, \"country\")}\r\n                                >\r\n                                    <option hidden={true} value='country is required'></option>\r\n                                </Select>\r\n                            </FormGroup>\r\n                        </Row>\r\n                        <Row>\r\n                            <FormGroup mb=\"20px\" >\r\n                                <Label display=\"block\" mb=\"5px\" htmlFor=\"city\">\r\n                                    City\r\n                                </Label>\r\n                                <Select\r\n                                    name='city'\r\n                                    id='city'\r\n                                    onChange={(e)=>handleCityChange(e,ind)}\r\n                                    feedbackText={errors?.city?.message}\r\n                                    state={hasKey(errors, \"city\") ? \"error\" : \"success\"}\r\n                                    showState={!!hasKey(errors, \"city\")}\r\n                                >\r\n                                    <option hidden={true} value='city is required'></option>\r\n                                </Select>\r\n                            </FormGroup>\r\n                        </Row>\r\n                        <Row   sm=\"40\" md=\"45\" lg=\"46\" xl=\"46\">\r\n                            <FormGroup mb=\"20px\" >\r\n                                <Label display=\"block\" mb=\"5px\" htmlFor=\"zip\">\r\n                                    ZIP code\r\n                                </Label>\r\n                                <Input\r\n                                    name=\"zip\"\r\n                                    id=\"zip\"\r\n                                    type=\"text\"\r\n                                    placeholder=\"Enter your ZIP code\"\r\n                                    onChange={(e)=>handleZIPChange(e,ind)}\r\n                                    feedbackText={errors?.index?.message}\r\n                                />\r\n                            </FormGroup>\r\n                        </Row>\r\n                        <Row sm=\"40\" md=\"45\" lg=\"46\" xl=\"46\">\r\n                            <FormGroup mb=\"20px\" >\r\n                                <Label display=\"block\" mb=\"5px\" htmlFor=\"address\">\r\n                                    Address\r\n                                </Label>\r\n                                <Input\r\n                                    name=\"address\"\r\n                                    id=\"address\"\r\n                                    type=\"text\"\r\n                                    placeholder=\"Enter your address\"\r\n                                    onChange={(e)=>handleAddressChange(e,ind)}\r\n                                />\r\n                            </FormGroup>\r\n                        </Row>\r\n                        <Row align='end' sm=\"20\" md=\"10\" lg=\"8\" xl=\"8\" >\r\n                            <Button onClick={()=>removeBranchAddress(ind)}  color='danger' mt=\"20px\" > Delete</Button>\r\n                        </Row>\r\n                    </Container>\r\n                ))}\r\n                <Container>\r\n                    <Row sm=\"100\" md=\"100\" lg=\"100\" xl=\"100\">\r\n                        <Button  type=\"button\" onClick={()=>addBranchAddress()} color=\"danger\" fullwidth>\r\n                            Add\r\n                        </Button>\r\n                    </Row>\r\n                    <Row sm=\"100\" md=\"100\" lg=\"100\" xl=\"100\">\r\n                        <hr/>\r\n                    </Row>\r\n                    <Row sm=\"100\" md=\"100\" lg=\"100\" xl=\"100\">\r\n                        <Button type=\"submit\" color=\"brand2\" fullwidth>\r\n                            Next\r\n                        </Button>\r\n                    </Row>\r\n\r\n                </Container>\r\n\r\n            </form>\r\n        </StyledWrap>\r\n    );\r\n}\r\nexport default BusinessInfoForm","import {StyledDesc, StyledTitle, StyledWrap2} from \"./style\";\r\nimport React from \"react\";\r\n\r\n\r\nexport interface ConfirmationProps{\r\n    handleChange:any\r\n}\r\n\r\n\r\nlet Confirmation:React.FC<ConfirmationProps> = ({handleChange})=>{\r\n    return (\r\n        <StyledWrap2 pb=\"100px\">\r\n            <StyledTitle  align='center'>Business account</StyledTitle>\r\n            <StyledDesc>You successfully registered as vendor.\r\n                Our people may connect to you as much as possible and\r\n                we may give you access to website as a vendor after qualification\r\n            </StyledDesc>\r\n        </StyledWrap2>\r\n    )\r\n}\r\n\r\nexport default Confirmation;","import {FC, useState,Fragment} from \"react\";\r\nimport SignupForm from \"../../components/signup-form\";\r\nimport {\r\n    StyledMedia,\r\n    StyledMediaBody,\r\n    StyledImage,\r\n    StyledImgText,\r\n    StyledSignUp, StyledSignin, StyledSignUpContainer2,\r\n} from \"./style\";\r\nimport Steps from \"../../components/signup-form/Steps\";\r\nimport BusinessInfoForm from \"../../components/signup-form/businessInfoForm\";\r\nimport Confirmation from \"../../components/signup-form/Confirmation\";\r\n\r\nconst AuthContainer: FC = () => {\r\n    let [step,setstep] = useState(1)\r\n    let changeStep = ()=>{\r\n        setstep(step+1)\r\n    }\r\n    return (\r\n            <Fragment>\r\n                <StyledSignUpContainer2>\r\n                    <Steps current={step} />\r\n                    {step === 1 && <StyledSignin><SignupForm handleChange={()=>changeStep()} /></StyledSignin>}\r\n                    {step === 2 && <StyledSignin><BusinessInfoForm handleChange={()=>changeStep()} /></StyledSignin>}\r\n                    {step === 3 && <StyledSignUp><Confirmation handleChange={()=>changeStep()} /></StyledSignUp>}\r\n                </StyledSignUpContainer2>\r\n            </Fragment>\r\n    );\r\n};\r\n\r\nexport default AuthContainer;\r\n","import React from \"react\";\r\nimport Layout from \"../layouts\";\r\nimport Content from \"../layouts/content\";\r\nimport AuthContainer from \"../containers/signup\";\r\nimport SEO from \"../components/seo\";\r\n\r\nconst SignUp: React.FC = () => {\r\n    return (\r\n        <Layout>\r\n            <SEO />\r\n            <Content fullHeight>\r\n                <AuthContainer />\r\n            </Content>\r\n        </Layout>\r\n    );\r\n};\r\n\r\nexport default SignUp;\r\n"],"sourceRoot":""}